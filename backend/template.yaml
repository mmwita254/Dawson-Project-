AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  serverless-pdf-chat

  SAM Template for serverless-pdf-chat using OpenAI

Globals:
  Function:
    Runtime: python3.11
    Handler: main.lambda_handler
    Architectures:
      - arm64
    Tracing: Active
    Environment:
      Variables:
        LOG_LEVEL: INFO
    Layers:
      - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV2-Arm64:51

Parameters:
  Frontend:
    Default: amplify
    Type: String
    AllowedValues:
      - local
      - amplify
  Repository:
    Type: String
  OpenAI_MODEL_ID:
    Default: "gpt-4"
    Type: String
  OpenAI_EMBEDDING_MODEL_ID:
    Default: "text-embedding-ada-002"
    Type: String
  OpenAI_API_Key:
    Type: String
    Description: "Your OpenAI API Key"

Conditions:
  DeployToAmplifyHosting: !Equals
    - !Ref Frontend
    - amplify

Resources:
  DocumentBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${AWS::StackName}-${AWS::Region}-${AWS::AccountId}"
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - HEAD
              - POST
              - DELETE
            AllowedOrigins:
              - "*"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  EmbeddingQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      VisibilityTimeout: 180
      MessageRetentionPeriod: 3600

  DocumentTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      KeySchema:
        - AttributeName: userid
          KeyType: HASH
        - AttributeName: documentid
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: userid
          AttributeType: S
        - AttributeName: documentid
          AttributeType: S
      BillingMode: PAY_PER_REQUEST

  MemoryTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      KeySchema:
        - AttributeName: SessionId
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: SessionId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST

  GeneratePresignedUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/generate_presigned_url/
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref DocumentBucket
      Environment:
        Variables:
          BUCKET: !Ref DocumentBucket
          REGION: !Sub ${AWS::Region}
      Events:
        Root:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /generate_presigned_url
            Method: GET

  UploadTriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/upload_trigger/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DocumentTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MemoryTable
        - S3ReadPolicy:
            BucketName: !Sub "${AWS::StackName}-${AWS::Region}-${AWS::AccountId}*"
        - SQSSendMessagePolicy:
            QueueName: !GetAtt EmbeddingQueue.QueueName
      Environment:
        Variables:
          DOCUMENT_TABLE: !Ref DocumentTable
          MEMORY_TABLE: !Ref MemoryTable
          QUEUE: !GetAtt EmbeddingQueue.QueueName
          BUCKET: !Sub "${AWS::StackName}-${AWS::Region}-${AWS::AccountId}"
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref DocumentBucket
            Events:
              - s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .pdf

  GenerateEmbeddingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/generate_embeddings/
      Timeout: 180
      MemorySize: 2048
      Policies:
        - SQSPollerPolicy:
            QueueName: !GetAtt EmbeddingQueue.QueueName
        - S3CrudPolicy:
            BucketName: !Ref DocumentBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref DocumentTable
      Environment:
        Variables:
          DOCUMENT_TABLE: !Ref DocumentTable
          BUCKET: !Ref DocumentBucket
          OPENAI_EMBEDDING_MODEL_ID: !Ref OpenAI_EMBEDDING_MODEL_ID
          OPENAI_API_KEY: !Ref OpenAI_API_Key
      Events:
        EmbeddingQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt EmbeddingQueue.Arn
            BatchSize: 1

  GenerateResponseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/generate_response/
      Timeout: 30
      MemorySize: 2048
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MemoryTable
        - S3CrudPolicy:
            BucketName: !Ref DocumentBucket
      Environment:
        Variables:
          MEMORY_TABLE: !Ref MemoryTable
          BUCKET: !Ref DocumentBucket
          OPENAI_MODEL_ID: !Ref OpenAI_MODEL_ID
          OPENAI_API_KEY: !Ref OpenAI_API_Key
      Events:
        Root:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /{documentid}/{conversationid}
            Method: POST

  DeleteDocumentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/delete_document/
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DocumentTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MemoryTable
        - S3CrudPolicy:
            BucketName: !Sub "${AWS::StackName}-${AWS::Region}-${AWS::AccountId}*"
      Environment:
        Variables:
          DOCUMENT_TABLE: !Ref DocumentTable
          MEMORY_TABLE: !Ref MemoryTable
          BUCKET: !Sub "${AWS::StackName}-${AWS::Region}-${AWS::AccountId}"
      Events:
        Root:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /doc/{documentid}
            Method: DELETE

Outputs:
  CognitoUserPool:
    Value: !Ref CognitoUserPool
  CognitoUserPoolClient:
    Value: !Ref CognitoUserPoolClient
  ApiGatewayBaseUrl:
    Value: !Sub "https://${Api}.execute-api.${AWS::Region}.${AWS::URLSuffix}/dev/"
